{"ast":null,"code":"var _jsxFileName = \"/home/ivo/Code/frontend-class/final-hw/simple-social-ui/src/components/Auth.jsx\",\n  _s = $RefreshSig$();\nimport \"./Auth.css\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AuthForm() {\n  _s();\n  const [isLogin, setIsLogin] = useState(false);\n  const [errMsg, setErrMsg] = useState(\"\");\n  const register = async form => {\n    form.preventDefault();\n    const username = form.target.name.value.trim();\n    if (!username) {\n      return;\n    }\n    let response = await fetch(\"http://127.0.0.1:3000/register\", {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        name: username\n      })\n    });\n    if (!response.ok) {\n      setErrMsg(\"User already exists\");\n      return;\n    }\n    login(form);\n  };\n  const login = async form => {\n    form.preventDefault();\n    const username = form.target.name.value.trim();\n    if (!username) {\n      return;\n    }\n    let response = await fetch(\"http://127.0.0.1:3000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify({\n        name: username\n      })\n    });\n    if (!response.ok) {\n      setErrMsg(\"User doesn't exist\");\n      return;\n    }\n    setLoginUser(username);\n    setErrMsg(\"\");\n    form.target.reset();\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"auth-form\",\n    onSubmit: () => isLogin ? login : register,\n    onFocus: () => errMsg,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"name-input\",\n      name: \"name\",\n      placeholder: \"Enter your username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn-reverse\",\n        onClick: () => setIsLogin(false),\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn-reverse\",\n        onClick: () => setIsLogin(true),\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthForm, \"sjShWdnXDm8Yotyi8i6Px2UOjug=\");\n_c = AuthForm;\nvar _c;\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","AuthForm","_s","isLogin","setIsLogin","errMsg","setErrMsg","register","form","preventDefault","username","target","name","value","trim","response","fetch","method","headers","credentials","body","JSON","stringify","ok","login","setLoginUser","reset","className","onSubmit","onFocus","children","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/ivo/Code/frontend-class/final-hw/simple-social-ui/src/components/Auth.jsx"],"sourcesContent":["import \"./Auth.css\";\nimport { useState } from 'react'\n\nexport default function AuthForm() {\n    const [isLogin, setIsLogin] = useState(false)\n    const [errMsg, setErrMsg] = useState(\"\")\n\n    const register = async (form) => {\n        form.preventDefault()\n\n        const username = form.target.name.value.trim()\n\n        if (!username) {\n            return\n        }\n\n        let response = await fetch(\"http://127.0.0.1:3000/register\", {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({ name: username })\n        })\n\n        if (!response.ok) {\n            setErrMsg(\"User already exists\")\n            return\n        }\n\n        login(form)\n    }\n\n    const login = async (form) => {\n        form.preventDefault()\n\n        const username = form.target.name.value.trim()\n        if (!username) {\n            return\n        }\n\n        let response = await fetch(\"http://127.0.0.1:3000/login\", {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            credentials: \"include\",\n            body: JSON.stringify({ name: username })\n        })\n\n        if (!response.ok) {\n            setErrMsg(\"User doesn't exist\")\n            return\n        }\n\n        setLoginUser(username)\n        setErrMsg(\"\")\n\n        form.target.reset()\n    } \n\n    return (\n        <form className=\"auth-form\" onSubmit={() => isLogin ? login : register} onFocus={() => errMsg}>\n            <input type=\"text\" className=\"name-input\" name=\"name\" placeholder=\"Enter your username\" />\n            <span>\n                <button type=\"submit\" className=\"btn-reverse\" onClick={() => setIsLogin(false)}>Register</button>\n                <button type=\"submit\" className=\"btn-reverse\" onClick={() => setIsLogin(true)}>Login</button>\n            </span>\n        </form>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}